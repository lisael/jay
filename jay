#! /bin/sh

set -e

### get opt

IS_LIB=1

while getopts "l" option
do
  case $option in
    l)
      IS_LIB=0
      ;;
  esac
done
shift $((OPTIND-1))
PKG_NAME=$*

MAIN_FILE=$PKG_NAME/$PKG_NAME.pony

### create dirs
mkdir -p $PKG_NAME
mkdir -p $PKG_NAME/test
mkdir -p $PKG_NAME/bench

if [ $IS_LIB -eq 0 ]; then
  mkdir -p $PKG_NAME/example
  MAIN_FILE=$PKG_NAME/example/main.pony
fi

### Init git
git init

### Create Main
echo '"""
#filename#

Do #pkgname# stuff.
"""
#uses#

actor Main
  new create(env: Env) =>
    env.out.print("Hello")
' > $MAIN_FILE
sed -i "s|#filename#|$MAIN_FILE|" $MAIN_FILE

sed -i "s/#pkgname#/$PKG_NAME/" $MAIN_FILE
if [ $IS_LIB -eq 0 ]; then
  sed -i "s/#uses#/use \"$PKG_NAME\"/" $MAIN_FILE
else
  sed -i "s/#uses#//" $MAIN_FILE
fi
git add $MAIN_FILE

if [ $IS_LIB -eq 0 ]; then
  echo '"""
#pkgname#.pony

Do #pkgname# stuff.
"""

actor Do#pkgname#
  new create(env: Env) =>
    env.out.print("Hello")
' > $PKG_NAME/$PKG_NAME.pony
  sed -i "s/#pkgname#/$PKG_NAME/" $PKG_NAME/$PKG_NAME.pony
  git add  $PKG_NAME/$PKG_NAME.pony
fi

### Create bench
echo '"""
bench_#pkgname#.pony

Bench #pkgname# stuff.
"""

use "ponybench"
use "#pkgname#"

actor Main
  let bench: PonyBench
  new create(env: Env) =>
    bench = PonyBench(env)
    bench[I32]("Add", {(): I32 => I32(2) + 2}, 1000)

' > $PKG_NAME/bench/bench_$PKG_NAME.pony

sed -i "s/#pkgname#/$PKG_NAME/" $PKG_NAME/bench/bench_$PKG_NAME.pony
git add  $PKG_NAME/bench/bench_$PKG_NAME.pony

### create tests
echo '"""
test_#pkgname#.pony

Test #pkgname# stuff.
"""

use "ponytest"
use "#pkgname#"

actor Main is TestList
  new create(env: Env) =>
    PonyTest(env, this)

  new make() =>
    None

  fun tag tests(test: PonyTest) =>
    test(_TestAdd)

class iso _TestAdd is UnitTest

  fun name():String => "Contains"

  fun apply(h: TestHelper) =>
    h.assert_eq[I32](2+2, 4)

' > $PKG_NAME/test/test_$PKG_NAME.pony

sed -i "s/#pkgname#/$PKG_NAME/" $PKG_NAME/test/test_$PKG_NAME.pony
git add $PKG_NAME/test/test_$PKG_NAME.pony

### create Makefile
echo 'PKG=#pkgname#
BUILD_DIR=build
PONYC=ponyc
PONY_SRC=$(shell find . -name "*.pony")
BIN_DIR=$(BUILD_DIR)/release
BIN=$(BIN_DIR)/#binpkg#
DEBUG_DIR=$(BUILD_DIR)/debug
DEBUG=$(DEBUG_DIR)/#binpkg#
TEST_SRC=$(PKG)/test
TEST_BIN=$(BUILD_DIR)/test
BENCH_SRC=$(PKG)/bench
BENCH_BIN=$(BUILD_DIR)/bench
prefix=/usr/local

all: $(BIN_DIR) test $(BIN) ## Run tests and build the package

run: $(BIN) ## Build and run the package
	$(BIN)

debug: $(DEBUG) ## Build a and run the package with --debug
	$(DEBUG)

test: $(TEST_BIN) runtest ## Build and run tests

$(TEST_BIN): $(BUILD_DIR) $(PONY_SRC)
	$(PONYC) -o $(BUILD_DIR) --path . $(TEST_SRC)

runtest: ## Run the tests
	$(TEST_BIN)

bench: $(BENCH_BIN) runbench ## Build and run benchmarks

$(BENCH_BIN): $(BUILD_DIR) $(PONY_SRC)
	$(PONYC) -o $(BUILD_DIR) --path . $(BENCH_SRC)

runbench: ## Run benchmarks
	$(BENCH_BIN)

$(BUILD_DIR):
	mkdir -p $(BUILD_DIR)

$(BIN_DIR):
	mkdir -p $(BIN_DIR)

$(BIN): $(PONY_SRC) 
	$(PONYC) -o $(BIN_DIR) -p . #binpkgpath#

$(DEBUG_DIR):
	mkdir -p $(DEBUG_DIR)

$(DEBUG): $(PONY_SRC) 
	$(PONYC) --debug -o $(DEBUG_DIR) #binpkgpath#

doc: $(PONY_SRC) ## Build the documentation 
	$(PONYC) -o $(BUILD_DIR) --docs --path . --pass=docs $(PKG)

clean: ## Remove all artifacts
	-rm -rf $(BUILD_DIR)
' > Makefile

if [ $IS_LIB -eq 1 ]; then
  echo ' 
install: ## Install binary in $(prefix). Default prefix=/usr/local
	mkdir -p $(prefix)/bin
	cp $(BIN) $(prefix)/bin

uninstall: ## Remove binary from prefix.
	rm $(prefix)/bin/$(PKG)
' >> Makefile
fi

# got issues with string escapes. Fix it the easy way, switch to
# double quotes
echo "
.PHONY: help

help: ## Show help
	@grep -E '^[a-zA-Z_-]+:.*?## .*\$$' Makefile | sort | awk 'BEGIN {FS = \":.*?## \"}; {printf \"\033[36m%-30s\033[0m %s\\\\n\", \$\$1, \$\$2}'" >> Makefile

if [ $IS_LIB -eq 1 ]; then
echo '	@echo
	@echo "Install instructions:"
	@echo "  make"
	@echo "  sudo make install"
	@echo "or, for your user only (assuming $$HOME/bin is in your PATH)"
	@echo "  make"
	@echo "  make install prefix=$$HOME"' >> Makefile
fi

sed -i "s/#pkgname#/$PKG_NAME/" Makefile
if [ $IS_LIB -eq 1 ]; then
  sed -i "s/#binpkg#/\$(PKG)/" Makefile
  sed -i "s/#binpkgpath#/\$(PKG)/" Makefile
else
  sed -i "s/#binpkg#/example/" Makefile
  sed -i "s/#binpkgpath#/\$(PKG)\/example/" Makefile
fi

echo 'build/
*.sw[p|m|n|o]' > .gitignore
git add .gitignore

git add Makefile
git commit -m "Initial commit"
